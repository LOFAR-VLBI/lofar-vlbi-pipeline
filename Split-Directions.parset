##################################################################
## LOFAR long baseline calibration pipeline parset     		##
##  - This pipeline requires prefactor V3 	       		##
##    to have already been run on both calibrator      		##
##    and target, and LB-Delay-Calibration on the target data	##
##  - The working and runtime directory are expected   		##
##    to be the same.			               		##
##  - Please report any issues at 				##
##    https://github.com/lmorabit/lofar-vlbi			##
##################################################################


##########################################################
## Software and directory paths		 		##
##########################################################

# software paths
! lofar_vlbi_dir            		= /home/morabito/software/lofar-vlbi
! prefactor_dir                         = /home/morabito/software/prefactor
# the following are in the singularity image and should not need to be changed
! losoto_directory                      = /opt/lofar/losoto
! aoflagger                             = /opt/lofar/aoflagger/bin/aoflagger
! lofar_directory                       = $LOFARROOT

## location of scripts
! scripts                               = {{ lofar_vlbi_dir }}/bin
! prefactor_scripts                     = {{ prefactor_dir }}/scripts

## directory information
! base_directory                        = input.output.working_directory
! job_directory                         = input.output.job_directory
! delaycal_directory                    = {{ job_directory }}/../Delay-Calibration
! results_directory                     = {{ job_directory }}/results

##########################################################
## These parameters may need to be updated.		##
##########################################################

## catalogue information -- update if you want to use your own instead of the auto-generated one
! image_cat  = {{ delaycal_directory }}/results/image_catalogue.csv
## format h5parm for setting time axis
! cal_solutions = {{ delaycal_directory }}/solutions.h5

## Runtime setup -- will depend on your computing cluster
! num_proc_per_node             = input.output.max_per_node    ## number of processes to use per step per node
! num_proc_per_node_limit       = 4     ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads              = 4    ## number of threads per process for NDPPP
! error_tolerance               = False ## False = stop if any subband fails, True = keep going

##########################################################
## Changing these will probably break something.	##
##########################################################

## data column from Delay-Calibration
! data_col = CORRECTED_DATA 

## Averaging parameters
! cal_avg_freqresolution    = 97.64kHz
! cal_avg_timeresolution    = 8.

## Station combination
! phaseup_command               = {ST001:'CS*'} ## 'CS*' for all core stations (or select stations you want to use) -- set to string '000' to not combine anything
! filter_command                = '!CS*&&*'      ## remove the core stations after combination

! rfistrategy			= HBAdefault

##
## END CONFIGURATION


##########################################################
## Steps to run.					##
##########################################################

pipeline.steps = [ setup, selfcal ]
 
pipeline.steps.setup = [ mk_results_dir, targetdata_map, targetdata_map_list, parallel_split, caldata_map, correct_beam, cal_model, h5parm_map, sourcedb_map ]
pipeline.steps.selfcal = [ tecsolve, plot_tec, apply_tec, selfcal ]

###########################################################################


##################################################################################################################
##														##
##			BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!						##
##														##
##################################################################################################################

# create the results directory if needed
mk_results_dir.control.kind               = plugin
mk_results_dir.control.type               = makeDirectory
mk_results_dir.control.directory          = {{ results_directory }}

# generate a mapfile of the delay-calibrated subbands
targetdata_map.control.kind             = plugin
targetdata_map.control.type             = createMapfile
targetdata_map.control.method           = mapfile_from_folder
targetdata_map.control.mapfile_dir      = input.output.mapfile_dir
targetdata_map.control.filename         = targetdata_map.mapfile
targetdata_map.control.folder           = {{ delaycal_directory }}
targetdata_map.control.pattern          = L*msdpppconcat

# convert to a mapfile with all subbands in one list
targetdata_map_list.control.kind            =   plugin
targetdata_map_list.control.type            =   createMapfile
targetdata_map_list.control.method          =   mapfile_all_to_one
targetdata_map_list.control.mapfile_dir     =   input.output.mapfile_dir
targetdata_map_list.control.filename        =   combine_data_tar_map.mapfile
targetdata_map_list.control.mapfile_in      =   targetdata_map.output.mapfile

# parallel split the direction to image
parallel_split.control.type		= pythonplugin
parallel_split.control.max_per_node	= {{ num_proc_per_node }}
parallel_split.control.executable	= {{ scripts }}/parallel_split.py
parallel_split.argument.flags           = [targetdata_map_list.output.mapfile,{{ image_cat }}]
parallel_split.argument.phaseup_cmd	= {{ phaseup_command }}
parallel_split.argument.filter_cmd	= {{ filter_command }}
parallel_split.argument.ncpu		= {{ num_proc_per_node }}
parallel_split.argument.datacol		= {{ data_col }}
parallel_split.argument.timeres		= {{ cal_avg_timeresolution }}
parallel_split.argument.freqres		= {{ cal_avg_freqresolution }}
parallel_split.argument.nsbs		= 999
parallel_split.argument.nthreads        = 0 ## 0 --> default of 4

# make a mapfile of the directions to image
caldata_map.control.kind		= plugin
caldata_map.control.type		= createMapfile
caldata_map.control.method		= mapfile_from_folder
caldata_map.control.mapfile_dir		= input.output.mapfile_dir
caldata_map.control.filename		= caldata_map.mapfile
caldata_map.control.folder		= {{ job_directory }}
caldata_map.control.pattern		= *imdir.ms

# correct the beam for the array_factor
correct_beam.control.type                       = pythonplugin
correct_beam.control.max_per_node		= {{ num_proc_per_node_limit }}
correct_beam.control.executable                 = {{ scripts }}/correct_array_factor.py
correct_beam.control.mapfile_in                 = caldata_map.output.mapfile
correct_beam.control.inputkey                   = msin
correct_beam.argument.mslist                    = msin
correct_beam.argument.results_dir               = {{ results_directory }}

# generate point source models with skynet
cal_model.control.type			= pythonplugin
cal_model.control.executable	  	= {{ scripts }}/skynet.py
cal_model.control.mapfile_in	  	= caldata_map.output.mapfile
cal_model.control.inputkey	  	= msin
cal_model.argument.flags		= [msin]
cal_model.argument.delayCalFile 	= {{ image_cat }}

# parmdb mapfile
h5parm_map.control.kind			= plugin
h5parm_map.control.type			= createMapfile
h5parm_map.control.method		= add_suffix_to_file
h5parm_map.control.mapfile_in		= caldata_map.output.mapfile
h5parm_map.control.add_suffix_to_file	= _tec.h5
h5parm_map.control.mapfile_dir		= input.output.mapfile_dir
h5parm_map.control.filename 		= h5parm_map.mapfile

# sourcedb mapfile
sourcedb_map.control.kind                = plugin
sourcedb_map.control.type                = createMapfile
sourcedb_map.control.method              = add_suffix_to_file
sourcedb_map.control.mapfile_in          = caldata_map.output.mapfile
sourcedb_map.control.add_suffix_to_file  = /sky
sourcedb_map.control.mapfile_dir         = input.output.mapfile_dir
sourcedb_map.control.filename            = sourcedb_map.mapfile

# run the tecsolve on them 
tecsolve.control.type			= dppp
tecsolve.control.inplace		= True
tecsolve.control.max_per_node		= {{ num_proc_per_node_limit }}
tecsolve.control.error_tolerance	= {{ error_tolerance }}
tecsolve.control.mapfiles_in		= [caldata_map.output.mapfile,h5parm_map.output.mapfile,sourcedb_map.output.mapfile]
tecsolve.control.inputkeys		= [msfiles,h5parms,skymodels]
tecsolve.argument.numthreads		= {{ max_dppp_threads }}
tecsolve.argument.msin			= msfiles
tecsolve.argument.msin.datacolumn	= DATA
tecsolve.argument.steps			= [gaincal]
tecsolve.argument.gaincal.caltype	= tecandphase
tecsolve.argument.gaincal.uvlambdamin   = 50000
tecsolve.argument.gaincal.solint	= 2
tecsolve.argument.gaincal.nchan		= 2
tecsolve.argument.gaincal.directions	= [ME0]
tecsolve.argument.gaincal.parmdb	= h5parms
tecsolve.argument.gaincal.sourcedb	= skymodels 

# plot the tec solutions
plot_tec.control.type			= pythonplugin
plot_tec.control.max_per_node		= 1
plot_tec.control.executable		= {{ scripts }}/plot_tec.py
plot_tec.argument.flags			= [targetdata_map_list.output.mapfile]

# apply the solutions
apply_tec.control.type			= dppp
apply_tec.control.max_per_node		= {{ num_proc_per_node_limit }}
apply_tec.control.error_tolerance	= {{ error_tolerance }}
apply_tec.control.mapfiles_in		= [caldata_map.output.mapfile,h5parm_map.output.mapfile]
apply_tec.control.inputkeys		= [msfiles,h5parms]
apply_tec.argument.msin			= msfiles
apply_tec.argument.numthreads		= {{ max_dppp_threads }}
apply_tec.argument.msin.datacolumn	= DATA
apply_tec.argument.msout.datacolumn	= DATA
apply_tec.argument.steps		= [applytec,applyphs]
apply_tec.argument.applytec.type	= applycal
apply_tec.argument.applytec.correction	= tec000
apply_tec.argument.applytec.parmdb	= h5parms
apply_tec.argument.applyphs.type	= applycal
apply_tec.argument.applyphs.correction	= phase000
apply_tec.argument.applyphs.parmdb	= h5parms


# run self-calibration
selfcal.control.type                    = pythonplugin
selfcal.control.executable              = {{ scripts }}/selfcal_difmap.py
selfcal.control.mapfile_in              = apply_tec.output.mapfile
selfcal.control.inputkey                = msin
selfcal.argument.flags                  = [msin]
selfcal.argument.clean_sig              = 6
selfcal.argument.map_size               = 1024
selfcal.argument.pix_size               = 50
selfcal.argument.obs_length             = 900
selfcal.argument.datacolumn             = DATA
selfcal.argument.startmod               = True
selfcal.argument.verbose                = False
selfcal.argument.catalogue		= {{ image_cat }}
selfcal.argument.naturalwt		= True


##################################################################
#                                                               ##
#                   END OF PIPELINE	                        ##
# 		                                                ##
##################################################################

