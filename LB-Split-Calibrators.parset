##################################################################
## LOFAR long baseline calibration pipeline parset     		##
##  - This pipeline requires prefactor V3 	       		##
##    to have already been run on both calibrator      		##
##    and target. 				       		##
##  - The working and runtime directory are expected   		##
##    to be the same.			               		##
##  - Please report any issues at 				##
##    https://github.com/lmorabit/long_baseline_pipeline	##
##################################################################


##########################################################
## Please update these parameters. 			##
##########################################################

# software paths
! long_baseline_pipeline_dir            = /home/lmorabit/long_baseline_pipeline_new
! prefactor_dir                         = /home/lmorabit/prefactor
! losoto_directory                     = /home/lmorabit/losoto
! rmextract_directory			= /home/lmorabit/RMextract
! aoflagger				= /opt/cep/aoflagger/aoflagger-2.10.0/build/bin/aoflagger ## path to your aoflagger executable
! lofar_directory 			= $LOFARROOT

##########################################################
## These parameters may need to be updated.		##
##########################################################

## Output directories
! job_directory                 = input.output.job_directory ## directory of the prefactor outputs
! results_directory             = {{ job_directory }}/results
! inspection_directory          = {{ results_directory }}/inspection/
! cal_values_directory          = {{ results_directory }}/calibrator_results/

## catalogue information
! image_cat  = {{ job_directory }}/lotss_catalogue.csv
! delay_cat  = {{ job_directory }}/delay_calibrators.csv
! subtract_cat  = {{ job_directory }}/subtract_sources.csv

## Runtime setup -- will depend on your computing cluster
! num_proc_per_node             = input.output.max_per_node    ## number of processes to use per step per node
! num_proc_per_node_limit       = 4     ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads              = 2     ## number of threads per process for NDPPP
! error_tolerance               = False ## False = stop if any subband fails, True = keep going

##########################################################
## Changing these will probably break something.	##
##########################################################

## global information
! base_directory                        = input.output.working_directory  
! job_directory                         = input.output.job_directory      
! scripts			 	= {{ long_baseline_pipeline_dir }}/bin
! prefactor_scripts			= {{ prefactor_dir }}/scripts

## Averaging parameters
! cal_shift_avg_timestep        = 4    ## Calibrator time averaging: output should be 8 seconds
! cal_shift_avg_freqstep        = 4    ## Calibrator freq averaging: output should be 2 channels per subband
! tgt_shift_avg_timestep        = 16   ## Target time averaging: output should be 16 seconds
! tgt_shift_avg_freqstep        = 16   ## Target freq averaging: output should be 1 channel per subband

## Station combination
! phaseup_command               = {ST001:'CS*'} ## 'CS*' for all core stations (or select stations you want to use)
! filter_command                = '!CS*&*'      ## remove the core stations after combination

## Closure phase stations
! closure_phase_stations        = 'DE601;DE605;ST001' ## list of three stations separated by ;
! closure_phase_file            = {{ job_directory }}/closure_phases.txt ## pipeline expects this location - do not changes

## Configuration for long baseline pipeline 
! lin2circ_executable               = {{ scripts }}/lin2circ.py
! firstnpy_file                     = {{ long_baseline_pipeline_dir }}/data/first_2008.simple.npy

! rfistrategy			= HBAdefault
! max_length = 60 ## amount of subbands to concatenate for full-bandwidth flagging (for calibrator you can take all SBs, for target stick to about 148)

##
## END CONFIGURATION


##########################################################
## Steps to run.					##
##########################################################

pipeline.steps = [ setup ]

pipeline.steps.setup = [ createmap_delaycal, createmap_delaycal_list ]


###########################################################################


##################################################################################################################
##														##
##			BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!						##
##														##
##################################################################################################################

# generate a mapfile of the delay-calibrated subbands
createmap_delaycal.control.kind             = plugin
createmap_delaycal.control.type             = createMapfile
createmap_delaycal.control.method           = mapfile_from_folder
createmap_delaycal.control.mapfile_dir      = input.output.mapfile_dir
createmap_delaycal.control.filename         = createmap_delaycal.mapfile
createmap_delaycal.control.folder           = {{ job_directory }}
createmap_delaycal.control.pattern          = L*ndppp_prep_target

# convert to a mapfile with all subbands in one list
createmap_delaycal_list.control.kind            =   plugin
createmap_delaycal_list.control.type            =   createMapfile
createmap_delaycal_list.control.method          =   mapfile_all_to_one
createmap_delaycal_list.control.mapfile_dir     =   input.output.mapfile_dir
createmap_delaycal_list.control.filename        =   combine_data_tar_map.mapfile
createmap_delaycal_list.control.mapfile_in      =   createmap_delaycal.output.mapfile

# create the NDPPP parset to explode-split the lbcs calibrators

# run NDPPP

# get a list of the calibrator measurement sets

# run loop3 on them independently

# subtract LBCS calibrators

# optional: make a DE-resolution map?

# starting from a flux-sorted list (brightest to faintest), run loop2/3 on all sources - or only above a certain flux limit?
# can we pre-divide the sky into patches?

# make images (no self-cal) at all other interesting positions (source positions or chess-boarding ... )


##################################################################
#                                                               ##
#                   END OF PIPELINE	                        ##
# 		                                                ##
##################################################################

